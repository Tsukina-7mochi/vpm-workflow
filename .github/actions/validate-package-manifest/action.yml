name: Validate Package Manifest 
description: |
  Checks if the package manifest contains the required fields,
  is the specified version, and the URL matches the specified pattern.

inputs:
  filename:
    required: true
    type: string
  version:
    required: false
    type: string
  url-pattern:
    required: false
    type: string

runs:
  using: composite

  steps:
    - name: Parse manifest file
      run: |
        echo "Manifest: ${{ inputs.filename }}"
        MANIFEST="$(cat ${{ inputs.filename }})"

        EXPECTED_VERSION="$(echo "${{ inputs.version }}" | sed -e 's/^v//')"
        echo "expected-version=$EXPECTED_VERSION" >> $GITHUB_ENV

        PKG_NAME="$(echo "$MANIFEST" | jq -r '.name')"
        PKG_NAME_TYPE="$(echo "$MANIFEST" | jq -r '.name | type')"
        PKG_DISPLAY_NAME_TYPE="$(echo "$MANIFEST" | jq -r '.displayName | type')"
        PKG_VERSION="$(echo "$MANIFEST" | jq -r '.version')"
        PKG_VERSION_TYPE="$(echo "$MANIFEST" | jq -r '.version | type')"
        PKG_URL="$(echo "$MANIFEST" | jq -r '.url')"
        PKG_URL_TYPE="$(echo "$MANIFEST" | jq -r '.url | type')"
        PKG_AUTHOR_NAME_TYPE="$(echo "$MANIFEST" | jq -r '.author.name | type')"
        PKG_AUTHOR_EMAIL_TYPE="$(echo "$MANIFEST" | jq -r '.author.email | type')"

        echo "pkg-name-type=$PKG_NAME_TYPE" >> $GITHUB_ENV
        echo "pkg-display-name-type=$PKG_DISPLAY_NAME_TYPE" >> $GITHUB_ENV
        echo "pkg-version=$PKG_VERSION" >> $GITHUB_ENV
        echo "pkg-version-type=$PKG_VERSION_TYPE" >> $GITHUB_ENV
        echo "pkg-url=$PKG_URL" >> $GITHUB_ENV
        echo "pkg-url-type=$PKG_URL_TYPE" >> $GITHUB_ENV
        echo "pkg-author-name-type=$PKG_AUTHOR_NAME_TYPE" >> $GITHUB_ENV
        echo "pkg-author-email-type=$PKG_AUTHOR_EMAIL_TYPE" >> $GITHUB_ENV

        URL_VERSION=${EXPECTED_VERSION:-$PKG_VERSION}
        echo "Checking $PKG_NAME"
        EXPECTED_URL="${{ inputs.url-pattern }}"
        EXPECTED_URL="$(echo "$EXPECTED_URL" | sed -e "s/{name}/$PKG_NAME/g")"
        EXPECTED_URL="$(echo "$EXPECTED_URL" | sed -e "s/{display-name}/$PKG_DISPLAY_NAME/g")"
        EXPECTED_URL="$(echo "$EXPECTED_URL" | sed -e "s/{version}/$URL_VERSION/g")"
        echo "expected-url=$EXPECTED_URL" >> $GITHUB_ENV

    - if: ${{ env.pkg-name-type != 'string' }}
      run: |
        echo '::error::"name" must be string, not ${{ env.pkg-name-type }}'
        exit 1

    - if: ${{ env.pkg-display-name-type != 'string' }}
      run: |
        echo '::error::"displayName" must be string, not ${{ env.pkg-display-name-type }}'
        exit 1

    - if: ${{ env.pkg-version-type != 'string' }}
      run: |
        echo '::error::"version" must be string, not ${{ env.pkg-version-type }}'
        exit 1

    - if: ${{ env.pkg-url-type != 'string' }}
      run: |
        echo '::error::"url" must be string, not ${{ env.pkg-url-type }}'
        exit 1

    - if: ${{ env.pkg-author-name-type != 'string' }}
      run: |
        echo '::error::"author.name" must be string, not ${{ env.pkg-author-name-type }}'
        exit 1

    - if: ${{ env.pkg-author-email-type != 'string' }}
      run: |
        echo '::error::"author.email" must be string, not ${{ env.pkg-author-email-type }}'
        exit 1
          
    - name: Check version
      id: version-check
      if: ${{ env.expected-version }}
      run: |
        echo "Expected: ${{ env.expected-version }}"
        echo "Actual  : ${{ env.pkg-version }}"
        [ "${{ env.pkg-version }}" = "${{ env.expected-version }}" ] || echo "failed=1" >> $GITHUB_OUTPUT

    - name: Check URL
      id: url-check
      run: |
        echo "Expected: ${{ env.expected-url }}"
        echo "Actual  : ${{ env.pkg-url }}"
        [ "${{ env.pkg-url }}" = "${{ env.expected-url }}" ] || echo "failed=1" >> $GITHUB_OUTPUT

    - name: Version check failed
      if: ${{ always() && steps.version-check.outputs.failed }}
      run: |
        echo "::error::Manifest version incorrect: expected ${{ env.expected-version }} but got ${{ env.pkg-version }}"
        exit 1

    - name: URL check failed
      if: ${{ always() && steps.url-check.outputs.failed }}
      run: |
        echo "::error::Manifest URL incorrect: expected ${{ env.expected-url }} but got ${{ env.pkg-url }}"
        exit 1

    - run: |
        echo "Validation ${{ env.manifest-file }}: ok" 
